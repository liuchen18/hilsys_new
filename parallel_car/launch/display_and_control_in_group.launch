<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="worlds/empty.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <group ns='parallel_car'>
    <param name="robot_description" command="$(find xacro)/xacro '$(find parallel_car)/urdf/parallel_car.urdf.xacro'"/>

    <node name="parallel_car_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
    args=" -urdf -param robot_description -model drone" />
 
    <node name="parallel_car_robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
      <remap from="/joint_states" to="/drone/joint_states"/>
    </node>

    <rosparam file="$(find parallel_car)/config/controllers.yaml" command="load" ns="/parallel_car"/>
    <node name="parallel_car_controller_spawner" pkg="controller_manager" type="spawner" 
      args="--namespace=/parallel_car
        joint_state_controller
        support_and_mech_controller"
      respawn="false" output="screen"
    />

  </group>

</launch>